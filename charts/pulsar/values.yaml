#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

nameOverride: {}
fullnameOverride: {}

## If persistence is enabled, components that have state will
## be deployed with PersistentVolumeClaims, otherwise, for test
## purposes, they will be deployed with emptyDir
persistence: no

## which extra components to deploy
extra:
  # Pulsar proxy
  proxy: yes
  # Bookkeeper auto-recovery
  autoRecovery: no
  # Pulsar dashboard
  dashboard: no
  # Bastion pod for administrative commands
  bastion: no
  # Pulsar Manager
  pulsar_manager: yes

## Which pulsar image to use
image:
  repository: apachepulsar/pulsar-all
  tag: 2.5.1
  pullPolicy: IfNotPresent

## Pulsar: Zookeeper cluster
## templates/zookeeper-statefulset.yaml
##
zookeeper:
  component: zookeeper
  replicaCount: 2
  updateStrategy:
    type: OnDelete
  podManagementPolicy: OrderedReady
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 64Mi
      cpu: 0.1
    limits:
      memory: 1G
      cpu: 1
  volumes:
    data:
      name: data
      size: 2Gi
      ## If the storage class is left undefined when using persistence
      ## the default storage class for the cluster will be used.
      ##
      # storageClass: nfs-client
  ## Zookeeper configmap
  ## templates/zookeeper-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\"-Xms64m -Xmx128m -Dcom.sun.management.jmxremote -Djute.maxbuffer=10485760 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:+DisableExplicitGC -XX:+PerfDisableSharedMem -Dzookeeper.forceSync=no\""
    PULSAR_GC: "\"-XX:+UseG1GC -XX:MaxGCPauseMillis=10\""
  ## Zookeeper service
  ## templates/zookeeper-service.yaml
  ##
  service:
    annotations:
      service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
    ports:
    - name: server
      port: 2888
    - name: leader-election
      port: 3888
    - name: stats
      port: 2181

  nodeSelector: {}

  tolerations: {}
  ## Zookeeper PodDisruptionBudget
  ## templates/zookeeper-pdb.yaml
  ##
  pdb:
    usePolicy: yes
    maxUnavailable: 1

## Pulsar Zookeeper metadata. The metadata will be deployed as
## soon as the last zookeeper node is reachable. The deployment
## of other components that depends on zookeeper, such as the
## bookkeeper nodes, broker nodes, etc will only start to be
## deployed when the zookeeper cluster is ready and with the
## metadata deployed
zookeeperMetadata:
  component: zookeeper-metadata
  resources:
    requests:
      memory: 128Mi
      cpu: 0.1
    limits:
      memory: 1G
      cpu: 0.5

## Pulsar: Bookkeeper cluster
## templates/bookkeeper-statefulset.yaml
##
bookkeeper:
  component: bookkeeper
  replicaCount: 2
  updateStrategy:
    type: OnDelete
  podManagementPolicy: OrderedReady
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 128Mi
      cpu: 0.2
    limits:
      memory: 512Mi
      cpu: 0.8
  volumes:
    journal:
      name: journal
      size: 5Gi
      ## If the storage class is left undefined when using persistence
      ## the default storage class for the cluster will be used.
      ##
      # storageClass: nfs-client
    ledgers:
      name: ledgers
      size: 5Gi
      ## If the storage class is left undefined when using persistence
      ## the default storage class for the cluster will be used.
      ##
      # storageClass: nfs-client
  ## Bookkeeper configmap
  ## templates/bookkeeper-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\"-Xms128m -Xmx256m -XX:MaxDirectMemorySize=128m -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.linkCapacity=1024 -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintHeapAtGC -verbosegc -XX:G1LogLevel=finest\""
    dbStorage_writeCacheMaxSizeMb: "32"
    dbStorage_readAheadCacheMaxSizeMb: "32"
    journalMaxSizeMB: "2048"
    statsProviderClass: org.apache.bookkeeper.stats.prometheus.PrometheusMetricsProvider
    useHostNameAsBookieID: "true"
  ## Bookkeeper configmap
  ## templates/bookkeeper-service.yaml
  ##
  service:
    annotations:
      publishNotReadyAddresses: "true"
    ports:
    - name: server
      port: 3181

  nodeSelector: {}

  tolerations: {}

  ## Bookkeeper PodDisruptionBudget
  ## templates/bookkeeper-pdb.yaml
  ##
  pdb:
    usePolicy: yes
    maxUnavailable: 1

## Pulsar: Broker cluster
## templates/broker-deployment.yaml
##
broker:
  component: broker
  replicaCount: 2
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 512Mi
      cpu: 0.05
    limits:
      memory: 1G
      cpu: 0.5
  ## Broker configmap
  ## templates/broker-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\"-Xms128m -Xmx256m -XX:MaxDirectMemorySize=128m -Dio.netty.leakDetectionLevel=disabled -Dio.netty.recycler.linkCapacity=1024 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+ExitOnOutOfMemoryError -XX:+PerfDisableSharedMem\""
    PULSAR_GC: "\"-XX:+UseG1GC -XX:MaxGCPauseMillis=10\""
    managedLedgerDefaultEnsembleSize: "2"
    managedLedgerDefaultWriteQuorum: "2"
    managedLedgerDefaultAckQuorum: "1"
    deduplicationEnabled: "false"
    exposeTopicLevelMetricsInPrometheus: "true"
  ## Broker service
  ## templates/broker-service.yaml
  ##
  service:
    annotations: {}
    ports:
    - name: http
      port: 8080
    - name: pulsar
      port: 6650

  nodeSelector: {}

  tolerations: {}

  ## Broker PodDisruptionBudget
  ## templates/broker-pdb.yaml
  ##
  pdb:
    usePolicy: yes
    maxUnavailable: 1

## Pulsar Extra: Proxy
## templates/proxy-deployment.yaml
##
proxy:
  component: proxy
  replicaCount: 3
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 64Mi
      cpu: 0.01
    limits:
      memory: 256Mi
      cpu: 0.2
  ## Proxy configmap
  ## templates/proxy-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\"-Xms64m -Xmx128m -XX:MaxDirectMemorySize=64m\""
  ## Proxy service
  ## templates/proxy-service.yaml
  ##
  service:
    annotations: {}
    type: NodePort
    ports:
    - name: http
      port: 8080
      nodePort: 30001
      protocol: TCP
    - name: tcp
      port: 6650
      nodePort: 30002
      protocol: TCP
  ## Proxy PodDisruptionBudget
  ## templates/proxy-pdb.yaml
  ##
  pdb:
    usePolicy: yes
    maxUnavailable: 1

  nodeSelector: {}

  tolerations: {}

## Pulsar Extra: Bookkeeper auto-recovery
## templates/autorecovery-deployment.yaml
##
autoRecovery:
  component: autorecovery
  replicaCount: 1
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations: {}
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
  ## Bookkeeper auto-recovery configmap
  ## templates/autorecovery-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\" -Xms1g -Xmx1g \""

## Pulsar Extra: Dashboard
## templates/dashboard-deployment.yaml
##
dashboard:
  component: dashboard
  replicaCount: 1
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations: {}
  tolarations: []
  gracePeriod: 0
  image:
    repository: apachepulsar/pulsar-dashboard
    tag: latest
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
  ## Dashboard service
  ## templates/dashboard-service.yaml
  ##
  service:
    annotations: {}
    ports:
    - name: server
      port: 80
  ingress:
    enabled: false
    annotations: {}
    tls: {}
    hostname: ""
    path: "/"
    port: 80


## Pulsar Extra: Bastion
## templates/bastion-deployment.yaml
##
bastion:
  component: bastion
  replicaCount: 1
  # nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool
  annotations: {}
  tolarations: []
  gracePeriod: 0
  resources:
    requests:
      memory: 1Gi
      cpu: 250m
  ## Bastion configmap
  ## templates/bastion-configmap.yaml
  ##
  configData:
    PULSAR_MEM: "\"-Xms1g -Xmx1g -XX:MaxDirectMemorySize=1g\""

## Components Stack: pulsar_manager
## templates/pulsar-manager.yaml
##

pulsar_manager:
  component: pulsar-manager
  replicaCount: 1
  annotations: {}
  tolarations: []
  gracePeriod: 0
  image:
    repository: apachepulsar/pulsar-manager
    tag: v0.1.0
    pullPolicy: IfNotPresent
  resources:
    requests:
      memory: 64Mi
      cpu: 0.01
    limits:
      memory: 512Mi
      cpu: 0.3
  ingress:
    enabled: false
    annotations: {}
    tls: {}
    hostname: ""
    path: "/"
    port: http
  service:
    type: ClusterIP
    annotations: {}
    ports:
      - name: http
        port: 9527
        targetPort: http
        protocol: TCP
  admin:
    user: pulsar
    password: pulsar

  nodeSelector: {}

  tolerations: {}

initContainers:
  resources:
    requests:
      memory: 64Mi
      cpu: 0.2
    limits:
      memory: 512Mi
      cpu: 0.5
